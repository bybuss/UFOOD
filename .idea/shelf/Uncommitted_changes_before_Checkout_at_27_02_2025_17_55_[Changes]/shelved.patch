Index: app/src/main/java/bob/colbaskin/ufood/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bob.colbaskin.ufood\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.animation.core.Animatable\r\nimport androidx.compose.animation.core.FastOutLinearInEasing\r\nimport androidx.compose.animation.core.FastOutSlowInEasing\r\nimport androidx.compose.animation.core.LinearEasing\r\nimport androidx.compose.animation.core.LinearOutSlowInEasing\r\nimport androidx.compose.animation.core.RepeatMode\r\nimport androidx.compose.animation.core.Spring\r\nimport androidx.compose.animation.core.VectorConverter\r\nimport androidx.compose.animation.core.animateDp\r\nimport androidx.compose.animation.core.animateDpAsState\r\nimport androidx.compose.animation.core.animateFloat\r\nimport androidx.compose.animation.core.animateOffset\r\nimport androidx.compose.animation.core.animateOffsetAsState\r\nimport androidx.compose.animation.core.animateValue\r\nimport androidx.compose.animation.core.infiniteRepeatable\r\nimport androidx.compose.animation.core.rememberInfiniteTransition\r\nimport androidx.compose.animation.core.spring\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.core.updateTransition\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.offset\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.ImageBitmap\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.imageResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.tooling.preview.PreviewScreenSizes\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.zIndex\r\nimport bob.colbaskin.ufood.ui.theme.CustomTheme\r\nimport bob.colbaskin.ufood.ui.theme.UFOODTheme\r\nimport bob.colbaskin.ufood.utils.calculateImageScaleToFullscreen\r\nimport bob.colbaskin.ufood.utils.CustomDarkPreview\r\nimport bob.colbaskin.ufood.utils.CustomLightPreview\r\nimport kotlinx.coroutines.coroutineScope\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\nclass SplashActivity: ComponentActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            UFOODTheme {\r\n                SplashScreen()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SplashScreen() {\r\n\r\n    val context = LocalContext.current\r\n    val density = LocalDensity.current\r\n    val screenPxWidth = with(density) {\r\n        LocalConfiguration.current.screenWidthDp.dp.toPx()\r\n    }\r\n    val screenPxHeight = with(density) {\r\n        LocalConfiguration.current.screenHeightDp.dp.toPx()\r\n    }\r\n    val center = with(density) {\r\n        (screenPxWidth / 2).toDp()\r\n    }\r\n    val endScreen = with(density) {\r\n        screenPxWidth.toDp()\r\n    }\r\n\r\n    var isAnimated by remember { mutableStateOf(false) }\r\n    val burgerTransition = updateTransition(targetState = isAnimated)\r\n    val burgerImage = ImageBitmap.imageResource(R.drawable.splash_main_logo)\r\n    val imageHalfWidth = with(density) {\r\n        (burgerImage.width / 2).toDp()\r\n    }\r\n    val burgerXOffset by burgerTransition.animateDp(\r\n        transitionSpec = {\r\n            spring(\r\n                dampingRatio = Spring.DampingRatioMediumBouncy,\r\n                stiffness = Spring.StiffnessVeryLow\r\n            )\r\n        }\r\n    ) { state ->\r\n        if (state) center - imageHalfWidth else -endScreen\r\n    }\r\n    val burgerSize = remember { Animatable(1f) }\r\n\r\n    val infiniteTransition = rememberInfiniteTransition()\r\n    val avocadoOffset: Offset by infiniteTransition.animateValue(\r\n        initialValue = Offset(0f, 0f),\r\n        targetValue = Offset((5..9).random().toFloat(), (3..7).random().toFloat()),\r\n        typeConverter = Offset.VectorConverter,\r\n        animationSpec = infiniteRepeatable(\r\n            animation = tween(\r\n                durationMillis = 2000,\r\n                easing = LinearEasing\r\n            ),\r\n            repeatMode = RepeatMode.Reverse\r\n        )\r\n    )\r\n    val smallCarrotOffset: Offset by infiniteTransition.animateValue(\r\n        initialValue = Offset(0f, 0f),\r\n        targetValue = Offset((-13..-8).random().toFloat(), (9..14).random().toFloat()),\r\n        typeConverter = Offset.VectorConverter,\r\n        animationSpec = infiniteRepeatable(\r\n            animation = tween(\r\n                durationMillis = 2000,\r\n                easing = LinearEasing,\r\n                delayMillis = 75\r\n            ),\r\n            repeatMode = RepeatMode.Reverse\r\n        )\r\n    )\r\n    val blurredCarrotOffset: Offset by infiniteTransition.animateValue(\r\n        initialValue = Offset(0f, 0f),\r\n        targetValue = Offset((8..12).random().toFloat(), (-6..-2).random().toFloat()),\r\n        typeConverter = Offset.VectorConverter,\r\n        animationSpec = infiniteRepeatable(\r\n            animation = tween(\r\n                durationMillis = 2000,\r\n                easing = LinearEasing,\r\n                delayMillis = 250\r\n            ),\r\n            repeatMode = RepeatMode.Reverse\r\n        )\r\n    )\r\n\r\n    val imageScale = calculateImageScaleToFullscreen(\r\n        R.drawable.splash_main_logo,\r\n        screenPxWidth,\r\n        screenPxHeight\r\n    )\r\n\r\n    LaunchedEffect(key1 = true) {\r\n        delay(1500)\r\n        isAnimated = true\r\n        delay(1000)\r\n        burgerSize.animateTo(\r\n            targetValue = imageScale,\r\n            animationSpec = tween(\r\n                durationMillis = 350,\r\n                easing = LinearEasing\r\n            )\r\n        )\r\n\r\n        context.startActivity(Intent(context, MainActivity::class.java))\r\n        (context as? Activity)?.finish()\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color = CustomTheme.colors.background)\r\n    ) {\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .align(Alignment.Center)\r\n                .padding(bottom = 150.dp),\r\n            verticalArrangement = Arrangement.Center,\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Image(\r\n                painter = painterResource(R.drawable.splash_main_logo),\r\n                contentDescription = \"Splash screen main logo\",\r\n                modifier = Modifier.scale(1.8f)\r\n            )\r\n            Text(\r\n                text = stringResource(R.string.app_name),\r\n                style = CustomTheme.typography.headLineLarge,\r\n                color = Color.White\r\n            )\r\n        }\r\n\r\n        Image(\r\n            painter = painterResource(R.drawable.blurred_avocado),\r\n            contentDescription = \"Blurred avocado image\",\r\n            modifier = Modifier\r\n                .align(Alignment.TopEnd)\r\n                .zIndex(2f)\r\n                .scale(1.55f)\r\n                .offset(\r\n                    x = 20.dp + avocadoOffset.x.dp,\r\n                    y = 32.dp + avocadoOffset.y.dp\r\n                )\r\n        )\r\n\r\n        Box (modifier = Modifier.align(Alignment.BottomStart)) {\r\n            Image(\r\n                painter = painterResource(R.drawable.small_carrot),\r\n                contentDescription = \"Small carrot image\",\r\n                modifier = Modifier\r\n                    .zIndex(2f)\r\n                    .scale(1.1f)\r\n                    .offset(\r\n                        x = 15.dp + smallCarrotOffset.x.dp,\r\n                        y = (-20).dp + smallCarrotOffset.y.dp\r\n                    )\r\n            )\r\n            Image(\r\n                painter = painterResource(R.drawable.blurred_carrot),\r\n                contentDescription = \"Blurred carrot image\",\r\n                modifier = Modifier\r\n                    .zIndex(1f)\r\n                    .scale(2f)\r\n                    .offset(\r\n                        x = blurredCarrotOffset.x.dp,\r\n                        y = blurredCarrotOffset.y.dp\r\n                    )\r\n            )\r\n        }\r\n        \r\n        Image(\r\n            painter = painterResource(R.drawable.splash_main_logo),\r\n            contentDescription = \"Burger\",\r\n            modifier = Modifier\r\n                .align(Alignment.CenterEnd)\r\n                .offset(x = -burgerXOffset)\r\n                .zIndex(3f)\r\n                .scale(1.5f * burgerSize.value)\r\n        )\r\n    }\r\n}\r\n\r\n@CustomLightPreview\r\n@CustomDarkPreview\r\n@Composable\r\nfun SplashPreviewDark() {\r\n    UFOODTheme  {\r\n        SplashScreen()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/bob/colbaskin/ufood/SplashActivity.kt b/app/src/main/java/bob/colbaskin/ufood/SplashActivity.kt
--- a/app/src/main/java/bob/colbaskin/ufood/SplashActivity.kt	(revision a598e78986c33bebeb6938140d250ec02238f36e)
+++ b/app/src/main/java/bob/colbaskin/ufood/SplashActivity.kt	(date 1740606913009)
@@ -166,6 +166,7 @@
     )
 
     LaunchedEffect(key1 = true) {
+        Log.d("Offset", "Avocado offset: $avocadoOffset, Carrot offset: $smallCarrotOffset, Blurred carrot offset: $blurredCarrotOffset")
         delay(1500)
         isAnimated = true
         delay(1000)
